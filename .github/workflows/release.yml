name: Release Build

permissions:
    contents: write

on:
    push:
        branches: [main]

jobs:
    release:
        runs-on: windows-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Clone PKHeX.Core only (shallow)
              run: |
                  git clone --depth 1 https://github.com/kwsch/PKHeX.git PKHeX

            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: 9.0.x

            - name: Read version from Directory.Build.props
              id: version
              shell: pwsh
              run: |
                  $xml = [xml](Get-Content Directory.Build.props)
                  $v = $xml.Project.PropertyGroup.Version
                  echo "version=$v" >> $env:GITHUB_OUTPUT

            - name: Fail if version not found
              if: steps.version.outputs.version == ''
              run: exit 1

            - name: Build PKHeX.Core
              run: dotnet build PKHeX/PKHeX.Core/PKHeX.Core.csproj -c Release

            - name: Run tests
              run: dotnet test Generator.Tests/Generator.Tests.csproj

            - name: Publish self-contained EXE
              run: |
                  dotnet publish Generator/Generator.csproj -c Release -r win-x64 --self-contained true `
                    -p:PublishSingleFile=true `
                    -p:UseAppHost=true `
                    -p:IncludeNativeLibrariesForSelfExtract=true

            - name: Zip executable
              run: Compress-Archive -Path Generator/bin/Release/net9.0/win-x64/publish/Generator.exe -DestinationPath Generator.zip

            - name: Extract latest changelog entry
              id: changelog
              shell: pwsh
              run: |
                  $version = "${{ steps.version.outputs.version }}"
                  $lines = Get-Content CHANGELOG.md
                  $found = $false
                  $entryLines = New-Object System.Collections.Generic.List[string]

                  foreach ($line in $lines) {
                    if ($line -match "## \[$version\]") {
                      $found = $true
                      continue
                    }

                    if ($found -and $line -match "^## \[") {
                      break
                    }

                    if ($found) {
                      $entryLines.Add($line)
                    }
                  }

                  $joined = $entryLines -join "`n"
                  "notes<<EOF" >> $env:GITHUB_OUTPUT
                  $joined >> $env:GITHUB_OUTPUT
                  "EOF" >> $env:GITHUB_OUTPUT

            - name: Create GitHub release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.version.outputs.version }}
                  name: v${{ steps.version.outputs.version }}
                  draft: true
                  generate_release_notes: true
                  body: ${{ steps.changelog.outputs.notes }}
                  files: Generator.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
